#Во вторую вставку нужно было написать те пары чисел друг за другом, чтобы число из первой вставки было кратно
# (делилось без остатка) сумме их значений.
#Пример кратности(деления без остатка):
#1 + 2 = 3 (сумма пары)
#9 / 3 = 3 (ровно 3 без остатка)
#9 кратно 3 (9 делится на 3 без остатка)
#Пример 1:
#9 - число из первой вставки
#1218273645 - нужный пароль (1 и 2, 1 и 8, 2 и 7, 3 и 6, 4 и 5 - пары; число 9 кратно сумме каждой пары)
#Пример 2:
#11 - число из первой вставки
#11029384756 - нужный пароль (1 и 10, 2 и 9, 3 и 8, 4 и 7, 5 и 6 - пары; число 11 кратно сумме каждой пары)
#К сожалению, у вас не так много времени, чтобы подбирать пароль вручную, шипы сверху уже движутся на вас (обожаю клише), тем более числа в первой вставке будут попадаться случайно.
#Составьте алгоритм, используя циклы, чтобы в независимости от введённого числа n (от 3 до 20) программа выдавала нужный пароль result, для одного введённого числа.


#Функция определения шифра(пароля), на входе первое число с первого камня от 3 до 20
def get_password(one_number):
    #создаем пустой список чисел
    number_list = list()
    #цикл по поиску первого числа из пары второго числа
    for i in range(1, one_number):
        #вторым числом в паре берем число на 1 больше, чем предполагаемое первое число в паре
        j = i + 1
        #выполняем цикл, пока сумма искомых чисел меньше или равна числу на первом камне
        while i + j <= one_number:
            # создаем пустой список для искомой пары чисел
            para_numbers = list()
            #проверяем, если число на первом камне нацело делиться на сумму чисел, то добавляем в список найденной пары
            if one_number % (i + j) == 0:
                para_numbers.append(i)
                para_numbers.append(j)
                number_list.append(para_numbers)
            j += 1
    return number_list

#Функция перевода списка в строку с возможностью указания разделителей для чисел
#numer_list - список пар чисел
#separate1 - разделитель между парами чисел
#separate2 - разделитель между числами в паре
def shifr_to_str(number_list, separate1, separate2):
    stroka = ''
    for i in range(0, len(number_list)):
        for j in range(0, len(number_list[i])):
             stroka +=str(number_list[i][j])
             if j<len(number_list[i])-1:
                 stroka += separate2
        if i<len(number_list)-1:
             stroka += separate1
    return stroka

#основная программа
#флаг для проверки корректности введенного с клавиатуры числа
bad_number = True
popitka = 0
#цикл для повторения ввода, если введено не верное число
while (bad_number) and (popitka <= 9):
    #Запрашиваем число с первого камня
    popitka +=1
    one_number = int(input('Введите целое число от 3 до 20: '))
    #Проверяем введенное на соответствие условиям задачи
    if one_number>=3 and one_number<=20:
        #меняем флаг для выхода из цикла при корректном вводе числа, удовлетворяющего условиям
        bad_number = False
    else:
        #если введено не верное число, просим повторить ввод
        print(f'Ваше число {one_number} не удовлетворяет условиям: от 3 до 20.')
        print(f'Попробуйте еще раз. Осталось попыток {10-popitka} из 10.')
        continue
if popitka >= 10 and bad_number:
    print ('Вы исчерпали количество попыток...')
else:
    number_list = ()
    number_list = get_password(one_number)
    print('Список пар чисел: ', *number_list)
    #разделитель между парами чисел
    separate1 = ''
    #разделитель между числами в паре
    separate2 = ''
    print('Искомый шифр: ', shifr_to_str(number_list, separate1, separate2))